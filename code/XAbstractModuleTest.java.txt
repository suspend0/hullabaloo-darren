package ca.hullabaloo.guice;

import com.google.common.base.Nullable;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Guice;
import com.google.inject.name.Named;
import com.google.inject.name.Names;
import junit.framework.TestCase;
import java.util.List;
import java.util.ArrayList;

public class XAbstractModuleTest extends TestCase {

  static class Tester {
    private final View myview;
    private final View yourview;

    @Inject
    public Tester(@Named("mine")View myview, @Nullable @Named("yourn")View yourview) {
      this.myview = myview;
      this.yourview = yourview;
    }
  }

  static interface View {
  }

  static class EvenView implements View {
    private final Source source;
    private final Service service;

    @Inject
    public EvenView(Source source, Service service) {
      this.source = source;
      this.service = service;
    }
  }

  static class OddView implements View {
    private final Source source;
    private final Service service;

    @Inject
    public OddView(Source source, Service service) {
      this.source = source;
      this.service = service;
    }
  }

  static interface Source {
  }

  static class MySource implements Source {
  }

  static class YourSource implements Source {
  }

  static interface Service {
  }

  static class MyService implements Service {
  }

  static class YourService implements Service {
  }

  // ==================================================
  public void testComplexBinds() {
    class XModule extends XAbstractModule {
      protected void configure() {
        bind(CharSequence.class).to(String.class);

        bind(View.class).annotatedWith(Names.named("mine")).to(EvenView.class)
            .with(Source.class).to(MySource.class)
            .with(Service.class).to(MyService.class);

        bind(Appendable.class).to(StringBuffer.class);

        bind(View.class).annotatedWith(Names.named("yourn")).to(OddView.class)
            .with(Source.class).to(YourSource.class)
            .with(Service.class).to(YourService.class);

        bind(List.class).to(ArrayList.class);
      }
    }

    Injector injector = Guice.createInjector(new XModule());
    assertTrue(injector.getInstance(CharSequence.class) instanceof String);
    assertTrue(injector.getInstance(Appendable.class) instanceof StringBuffer);

    assertTester(injector);

    assertTrue(injector.getInstance(List.class) instanceof ArrayList);
  }

  public void testJustRegularBinds() {
    class XModule extends XAbstractModule {
      protected void configure() {
        bind(CharSequence.class).to(String.class);
        bind(List.class).to(ArrayList.class);
      }
    }

    Injector injector = Guice.createInjector(new XModule());
    assertTrue(injector.getInstance(CharSequence.class) instanceof String);
    assertTrue(injector.getInstance(List.class) instanceof ArrayList);
  }

  public void testWithBinding() {
    class XModule extends XAbstractModule {
      protected void configure() {
        bind(View.class).annotatedWith(Names.named("mine")).to(EvenView.class)
            .with(Source.class).to(MySource.class)
            .with(Service.class).to(MyService.class);
        bind(View.class).annotatedWith(Names.named("yourn")).to(OddView.class)
            .with(Source.class).to(YourSource.class)
            .with(Service.class).to(YourService.class);
      }
    }

    Injector injector = Guice.createInjector(new XModule());
    assertTester(injector);
  }

  // =========================================================
  private void assertTester(Injector injector) {
    Tester t = injector.getInstance(Tester.class);
    assertTrue(t.myview instanceof EvenView);
    assertTrue(((EvenView) t.myview).service instanceof MyService);
    assertTrue(((EvenView) t.myview).source instanceof MySource);

    assertTrue(t.yourview instanceof OddView);
    assertTrue(((OddView) t.yourview).service instanceof YourService);
    assertTrue(((OddView) t.yourview).source instanceof YourSource);
  }
}
